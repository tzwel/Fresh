{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\uddca Fresh A fresh approach to creating single page apps Fresh is a javascript framework built with developers in mind. It forges concepts of many existing frameworks, builds on them and introduces new features to the table. Fresh is designed as an easy to use and grasp framework, that you can learn in minutes. It's currently focused on SPA s but this might change in the future. \u26a0 Fresh is a personal side-project. It's heavily work-in-progress and lots of features are still not implemented, or are not working correctly. It's NOT suitable for production yet. \u26a0","title":"\ud83e\uddca Fresh"},{"location":"#fresh","text":"A fresh approach to creating single page apps Fresh is a javascript framework built with developers in mind. It forges concepts of many existing frameworks, builds on them and introduces new features to the table. Fresh is designed as an easy to use and grasp framework, that you can learn in minutes. It's currently focused on SPA s but this might change in the future. \u26a0 Fresh is a personal side-project. It's heavily work-in-progress and lots of features are still not implemented, or are not working correctly. It's NOT suitable for production yet. \u26a0","title":"\ud83e\uddca Fresh"},{"location":"aliases/","text":"Fresh provides useful aliases for common JavaScript and its own methods. Alias table Code Alias document.querySelectorAll $qsa document.querySelector $qs window $var Learn more about the $var alias here .","title":"Aliases"},{"location":"aliases/#alias-table","text":"Code Alias document.querySelectorAll $qsa document.querySelector $qs window $var Learn more about the $var alias here .","title":"Alias table"},{"location":"components/","text":"Declaring components You declare your components in files ending with the .fresh extension, in the components directory specified in the config. On default it's ./fresh/components Example component An example nav component from components directory, it's just valid html markup so you don't need to learn a new language <nav> <a href=\"/#/\"> Main page </a> <a href=\"/#/route\"> Route </a> </nav>","title":"Components"},{"location":"components/#declaring-components","text":"You declare your components in files ending with the .fresh extension, in the components directory specified in the config. On default it's ./fresh/components","title":"Declaring components"},{"location":"components/#example-component","text":"An example nav component from components directory, it's just valid html markup so you don't need to learn a new language <nav> <a href=\"/#/\"> Main page </a> <a href=\"/#/route\"> Route </a> </nav>","title":"Example component"},{"location":"config/","text":"Config Every Fresh app needs a config to run. Here's a basic config placed directly in index.html as a <script> tag: <script> const Fresh = { \"fresh\": { \"root\": \"fresh\", \"components\": \"components\", \"router\": { \"storeRoutesInTPM\": true, \"errorRoute\": true, \"entryPoint\": \"app\", \"routes\": \"routes\" } } }; </script> A config can also be a json file. An example fresh.config.json file: { \"fresh\": { \"root\": \"fresh\", \"components\": \"components\", \"router\": { \"storeRoutesInTPM\": true, \"errorRoute\": true, \"entryPoint\": \"app\", \"routes\": \"routes\" } } } What does all of this mean? root - the root folder Fresh resides in components - you store your components in this directory storeRoutesInTPM - head to tpm for a brief explanation errorRoute - whether to redirect 404 errors to a custom 404.fresh route, or not entryPoint - the element your routes get injected in, it's basically where your webapp lives routes - you store your routes (pages) in this directory","title":"Config"},{"location":"config/#config","text":"Every Fresh app needs a config to run. Here's a basic config placed directly in index.html as a <script> tag: <script> const Fresh = { \"fresh\": { \"root\": \"fresh\", \"components\": \"components\", \"router\": { \"storeRoutesInTPM\": true, \"errorRoute\": true, \"entryPoint\": \"app\", \"routes\": \"routes\" } } }; </script> A config can also be a json file. An example fresh.config.json file: { \"fresh\": { \"root\": \"fresh\", \"components\": \"components\", \"router\": { \"storeRoutesInTPM\": true, \"errorRoute\": true, \"entryPoint\": \"app\", \"routes\": \"routes\" } } }","title":"Config"},{"location":"config/#what-does-all-of-this-mean","text":"root - the root folder Fresh resides in components - you store your components in this directory storeRoutesInTPM - head to tpm for a brief explanation errorRoute - whether to redirect 404 errors to a custom 404.fresh route, or not entryPoint - the element your routes get injected in, it's basically where your webapp lives routes - you store your routes (pages) in this directory","title":"What does all of this mean?"},{"location":"fallback/","text":"Fallbacks When a component fails to load, your users won't get an easy to understand error message on the screen, so you must ensure that the most crucial components on your page provide at least a hint that something went wrong While it should be almost impossible for a component to not load correctly, there are still the edge cases you need to be prepared for. Here's an example of the nav component with a fallback <nav import> The website navigation failed to load </nav> Even though a <noscript> tag informing the user about disabled javascript should be enough, adding a fallback message is still a good practice.","title":"Fallbacks"},{"location":"fallback/#fallbacks","text":"When a component fails to load, your users won't get an easy to understand error message on the screen, so you must ensure that the most crucial components on your page provide at least a hint that something went wrong While it should be almost impossible for a component to not load correctly, there are still the edge cases you need to be prepared for. Here's an example of the nav component with a fallback <nav import> The website navigation failed to load </nav> Even though a <noscript> tag informing the user about disabled javascript should be enough, adding a fallback message is still a good practice.","title":"Fallbacks"},{"location":"importing/","text":"Importing a component Importing a component is as simple as just adding the import attibute to the element, Fresh will try load the component from the default path unless specified otherwise <nav import></nav> Importing a component from a subdirectory You would usually want to organize your components in different subfolders. If your component is in the ./fresh/components/foo/bar directory for example, you can simply specify the path relative to the default components folder like this: <nav import=\"foo/bar\"></nav>","title":"Importing components"},{"location":"importing/#importing-a-component","text":"Importing a component is as simple as just adding the import attibute to the element, Fresh will try load the component from the default path unless specified otherwise <nav import></nav>","title":"Importing a component"},{"location":"importing/#importing-a-component-from-a-subdirectory","text":"You would usually want to organize your components in different subfolders. If your component is in the ./fresh/components/foo/bar directory for example, you can simply specify the path relative to the default components folder like this: <nav import=\"foo/bar\"></nav>","title":"Importing a component from a subdirectory"},{"location":"main%20concepts/","text":"Fresh doesn't tell you how to organize your project, but rather guides you to a standard by using defaults that you shouldn't need to change. However, if you ever need to, nothing will break and you will be able to develop without any hiccups, Fresh is a framework focused on the developer.","title":"Not opinionated, but standardized"},{"location":"per%20route%20variables/","text":"Fresh provides a way to declare variables only once when a route is first loaded. The variables never reset on route change as opposed to classic const s and let s. Declaring a per route variable Per route variables are declared with a string, the variable's name is prepended with the \"init\" keyword. An example: \"init myVariable\" Changing a per route variable's value Changing a per route variable's value is as simple as calling $var.myVariable = 5 This snippet changed myVariable 's value to 5. It can even be simplified to myVariable = 5 but it's recommended to use the $var alias for clarity.","title":"Per route variables"},{"location":"per%20route%20variables/#declaring-a-per-route-variable","text":"Per route variables are declared with a string, the variable's name is prepended with the \"init\" keyword. An example: \"init myVariable\"","title":"Declaring a per route variable"},{"location":"per%20route%20variables/#changing-a-per-route-variables-value","text":"Changing a per route variable's value is as simple as calling $var.myVariable = 5 This snippet changed myVariable 's value to 5. It can even be simplified to myVariable = 5 but it's recommended to use the $var alias for clarity.","title":"Changing a per route variable's value"},{"location":"routing/","text":"Routing Fresh comes with a router that automatically fetches the correct route and loads it when it's requested. You link between routes by appending /#/ at the beggining of a route, so Fresh knows when to reroute. An example of linking to another page called route : <a href=\"/#/route\"> A link </a>","title":"Routing"},{"location":"routing/#routing","text":"Fresh comes with a router that automatically fetches the correct route and loads it when it's requested. You link between routes by appending /#/ at the beggining of a route, so Fresh knows when to reroute. An example of linking to another page called route : <a href=\"/#/route\"> A link </a>","title":"Routing"},{"location":"tpm/","text":"TPM TPM - standing for TemPorary Memory is easiest to understand by just comparing it to cache, with the difference of it immediately clearing after reloading the page. All your components and routes ( storeRoutesInTPM in the config) are stored in TPM and loaded when needed, minimizing the amount of requests sent to the server and making the app faster by storing already used data client-side.","title":"TPM"},{"location":"tpm/#tpm","text":"TPM - standing for TemPorary Memory is easiest to understand by just comparing it to cache, with the difference of it immediately clearing after reloading the page. All your components and routes ( storeRoutesInTPM in the config) are stored in TPM and loaded when needed, minimizing the amount of requests sent to the server and making the app faster by storing already used data client-side.","title":"TPM"}]}